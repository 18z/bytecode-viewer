package the.bytecode.club.bytecodeviewer.malwarescanner.impl;

import org.objectweb.asm.tree.*;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareScan;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareCodeScanner;
import the.bytecode.club.bytecodeviewer.malwarescanner.util.SearchableString;

import java.util.regex.Pattern;

import static the.bytecode.club.bytecodeviewer.Constants.nl;

/**
 * Scans strings for common URL patterns:
 *  Any string containing www
 *  Any string containing http://
 *  Any string containing https://
 *  Any string matching an IP pattern
 *
 * @author Konloch
 * @author WaterWolf
 * @since 6/27/2021
 */
public class URLScanner extends MalwareCodeScanner
{
	private static final Pattern ipPattern = Pattern.compile("\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b");
	
	@Override
	public void scanFieldString(MalwareScan scan, ClassNode cn, FieldNode field, SearchableString string)
	{
		if (string.searchable.contains("www.")
				|| string.searchable.contains("http://")
				|| string.searchable.contains("https://")
				|| ipPattern.matcher(string.searchable).matches())
			foundLDC(scan, string.original, "at field " + fieldToString(cn, field) + nl);
	}
	
	@Override
	public void scanMethodString(MalwareScan scan, ClassNode cn, MethodNode method, SearchableString string)
	{
		if (string.searchable.contains("www.")
				|| string.searchable.contains("http://")
				|| string.searchable.contains("https://")
				|| ipPattern.matcher(string.searchable).matches())
			foundLDC(scan, string.original, "at method " + methodToString(cn, method) + nl);
	}
	
	@Override
	public void scanMethodInstruction(MalwareScan scan, ClassNode cn, MethodNode method, AbstractInsnNode instruction) { }
}