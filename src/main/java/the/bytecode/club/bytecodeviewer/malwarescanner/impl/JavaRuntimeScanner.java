package the.bytecode.club.bytecodeviewer.malwarescanner.impl;

import org.objectweb.asm.tree.*;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareScan;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareCodeScanner;
import the.bytecode.club.bytecodeviewer.malwarescanner.util.SearchableString;

import static the.bytecode.club.bytecodeviewer.Constants.nl;

/**
 * Scans for any trace of java/lang/Runtime inside of method instructions and strings
 *
 * @author Konloch
 * @since 6/27/2021
 */
public class JavaRuntimeScanner extends MalwareCodeScanner
{
	@Override
	public void scanFieldString(MalwareScan scan, ClassNode cn, FieldNode field, SearchableString string)
	{
		if(string.searchable.contains("java/lang/Runtime")
				|| string.searchable.contains("java.lang.Runtime"))
			foundLDC(scan, string.original, "at field " + fieldToString(cn, field) + nl);
	}
	
	@Override
	public void scanMethodString(MalwareScan scan, ClassNode cn, MethodNode method, SearchableString string)
	{
		if(string.searchable.contains("java/lang/Runtime")
				|| string.searchable.contains("java.lang.Runtime"))
			foundLDC(scan, string.original, "at method " + methodToString(cn, method) + nl);
	}
	
	@Override
	public void scanMethodInstruction(MalwareScan scan, ClassNode cn, MethodNode method, AbstractInsnNode instruction)
	{
		if (instruction instanceof MethodInsnNode)
		{
			final MethodInsnNode min = (MethodInsnNode) instruction;
			if (min.owner.startsWith("java/lang/Runtime"))
				foundMethod(scan, instructionToString(instruction) + " at " + methodToString(cn, method) + nl);
		}
	}
}