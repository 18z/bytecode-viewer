package the.bytecode.club.bytecodeviewer.malwarescanner.impl;

import com.strobel.assembler.ir.OpCode;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.*;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareCodeScanner;
import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareScan;
import the.bytecode.club.bytecodeviewer.malwarescanner.util.SearchableString;

import static the.bytecode.club.bytecodeviewer.Constants.nl;

/**
 * Checks for the security manager getting set to null
 *
 * @author Konloch
 * @author Adrianherrera
 * @since 6/27/2021
 */
public class NullSecurityManagerScanner extends MalwareCodeScanner
{
	private int lastInstruction;
	
	@Override
	public void scanFieldString(MalwareScan scan, ClassNode cn, FieldNode field, SearchableString string) { }
	
	@Override
	public void scanMethodString(MalwareScan scan, ClassNode cn, MethodNode method, SearchableString string) { }
	
	@Override
	public void scanMethodInstruction(MalwareScan scan, ClassNode cn, MethodNode method, AbstractInsnNode instruction)
	{
		if (instruction instanceof MethodInsnNode && instruction.getOpcode() == Opcodes.INVOKESTATIC)
		{
			final MethodInsnNode min = (MethodInsnNode) instruction;
			final String owner = min.owner;
			final String name =  min.name;
			
			if(lastInstruction == OpCode.ACONST_NULL.getCode()
					&& owner.equals("java/lang/System")
					&& name.equals("setSecurityManager"))
			{
				found(scan, "Security Manager set to null at method " + methodToString(cn, method) + nl);
			}
		}
		
		lastInstruction = instruction.getOpcode();
	}
	
	@Override
	public void scanningClass(MalwareScan scan, ClassNode cn)
	{
		lastInstruction = 0;
		super.scanningClass(scan, cn);
	}
}