package the.bytecode.club.bytecodeviewer.malwarescanner;

import org.objectweb.asm.tree.*;
import the.bytecode.club.bytecodeviewer.malwarescanner.util.SearchableString;

/**
 * The base class for the malware code scanners
 *
 * @author Konloch
 * @since 6/27/2021
 */
public abstract class MalwareCodeScanner implements CodeScanner
{
	public abstract void scanFieldString(MalwareScan scan, ClassNode cn, FieldNode field, SearchableString string);
	
	public abstract void scanMethodString(MalwareScan scan, ClassNode cn, MethodNode method, SearchableString string);
	
	public abstract void scanMethodInstruction(MalwareScan scan, ClassNode cn, MethodNode method, AbstractInsnNode instruction);
	
	@Override
	public void scanningClass(MalwareScan scan, ClassNode cn)
	{
		scanFields(scan, cn, cn.fields.toArray(new FieldNode[0]));
		scanMethods(scan, cn, cn.methods.toArray(new MethodNode[0]));
	}
	
	@Override
	public void scanFields(MalwareScan scan, ClassNode cn, FieldNode[] fields)
	{
		for (FieldNode field : fields)
		{
			Object fieldValue = field.value;
			
			//scan strings
			if (fieldValue instanceof String)
				scanFieldString(scan, cn, field, new SearchableString((String) fieldValue));
			
			//scan string array
			else if (fieldValue instanceof String[])
				for(String s : (String[]) fieldValue)
					scanFieldString(scan, cn, field, new SearchableString(s));
		}
	}
	
	@Override
	public void scanMethods(MalwareScan scan, ClassNode cn, MethodNode[] methods)
	{
		for (MethodNode method : methods)
		{
			InsnList instructionList = method.instructions;
			
			//scan each instruction
			for (AbstractInsnNode instruction : instructionList.toArray())
			{
				scanMethodInstruction(scan, cn, method, instruction);
				
				if (instruction instanceof LdcInsnNode)
				{
					if (((LdcInsnNode) instruction).cst instanceof String)
					{
						final String string = (String) ((LdcInsnNode) instruction).cst;
						scanMethodString(scan, cn, method, new SearchableString(string));
					}
				}
			}
		}
	}
	
	public String fieldToString(ClassNode cn, FieldNode field)
	{
		return cn.name + "." + field.name + "(" + field.desc + ")";
	}
	
	public String methodToString(ClassNode cn, MethodNode method)
	{
		return cn.name + "." + method.name + "(" + method.desc + ")";
	}
	
	public void foundLDC(MalwareScan scan, String ldc, String foundAt)
	{
		scan.sb.append("Found LDC \"").append(ldc).append("\" ").append(foundAt);
	}
	
	public void foundMethod(MalwareScan scan, String foundAt)
	{
		scan.sb.append("Found Method call to ").append(foundAt);
	}
	
	public void found(MalwareScan scan, String found)
	{
		scan.sb.append("Found ").append(found);
	}
}
